import asyncio
from sqlalchemy import select, update, delete
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError, TelegramBadRequest

from app.database.data import async_session, User
from app.database.requests import get_all_users
from app.components.keyboard import notify, notify_schedule, notify_all_schedule, advert_notify_new
from config import update_message
from app.components.logs.logs import logger

#–ù–∞–∑–≤–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—Ç —Å–∞–º–∏ –∑–∞ —Å–µ–±—è
async def notify_update():
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_video(users, video='BAACAgIAAxkBAAJdzGfVclGggV-ZvaLhI_JBUR2JV1z8AAKMbwAC2CepShwx6gygvXFENgQ', caption=update_message, parse_mode='html', reply_markup=notify)
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def special_notify():
    for users in await get_all_users():
        try:
            from run import bot
            sent_msg = await bot.send_message(users, '–í —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ë–û–¢ –ü–ï–†–ï–ï–ó–ñ–ê–ï–¢ -> @HelperSchool3bot', parse_mode='HTML',)
            await bot.pin_chat_message(users, sent_msg.message_id, disable_notification=False)
        except Exception as e:
            print(e)
            continue


async def new_advert_notify(title):
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, f'<b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n{title}</b>', parse_mode='HTML', reply_markup=await advert_notify_new())
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def new_advert_notify(title):
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, f'<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n\n{title}</b>', parse_mode='HTML', reply_markup=await advert_notify_new())
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def notify_update_schedule():
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, '<b>‚ÄºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é!</b>\n ·Ö† ', parse_mode='html', reply_markup=await notify_all_schedule())
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue



async def notify_update_calls():
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users,
                                   '<b>‚ÄºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n\nüîî –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤!</b>\n ·Ö† ',
                                   parse_mode='html', reply_markup=await notify_all_schedule())
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def notify_rework_schedule(message):
    for users in await get_all_users():
        days = {"monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫", "wednesday": "—Å—Ä–µ–¥—É", "thursday": "—á–µ—Ç–≤–µ—Ä–≥",
                "friday": "–ø—è—Ç–Ω–∏—Ü—É"}

        try:
            from run import bot
            await bot.send_message(users, f'<b>‚ÄºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n\nüìÖ –í–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ {days[f"{message}"]}!</b>\n  ·Ö† ', parse_mode='html', reply_markup=await notify_schedule(message))
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def technical_works():
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, '<b>‚ÄºÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤!\n\n\n –ë–æ—Ç –±—É–¥–µ—Ç –≤—Å–∫–æ—Ä–µ –æ—Ç–∫–ª—é—á–µ–Ω!</b>', parse_mode='html', reply_markup=notify)
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def technical_works_finish():
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, '<b>‚ÄºÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω!\n\n\n –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω! ‚úÖ</b>', parse_mode='html', reply_markup=notify)
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue


async def message_admin(message):
    for users in await get_all_users():
        try:
            from run import bot
            await bot.send_message(users, f'{message}',parse_mode='HTML', reply_markup=notify)
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            await asyncio.sleep(retry_after)
            continue
        except TelegramForbiddenError:
            async with async_session() as session:
                stmt = (delete(User).where(User.tg_id == users))
                await session.execute(stmt)
                await session.commit()
                await logger.info(f'{users} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!')
                continue
        except TelegramBadRequest:
            try:
                async with async_session() as session:
                    stmt = (delete(User).where(User.tg_id == users))
                    await session.execute(stmt)
                    await session.commit()
                    await logger.info(f'{users} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç!')
                    continue
            except Exception:
                continue