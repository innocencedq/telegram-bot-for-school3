from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import update, func

from app.components.logs.logs import logger
from app.database.data import User, async_session
from app.components.events.events_keyboard import woman_day_keyboard, woman_day_start, are_u_sure, report
from app.components.keyboard import back_main, notify
from app.database.requests import get_list_username, get_username_with_id, get_user_value_valentines, get_user_value_valentines_from_top

router_woman_day = Router()


#–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–∞
char_replace = {
    '–∞': ['–∞', 'a', '@'],
    '–±': ['–±', '6', 'b'],
    '–≤': ['–≤', 'b', 'v'],
    '–≥': ['–≥', 'r', 'g'],
    '–¥': ['–¥', 'd'],
    '–µ': ['–µ', 'e'],
    '—ë': ['—ë', 'e'],
    '–∂': ['–∂', 'zh', '*'],
    '–∑': ['–∑', '3', 'z'],
    '–∏': ['–∏', 'u', 'i'],
    '–π': ['–π', 'u', 'i'],
    '–∫': ['–∫', 'k', 'i{', '|{'],
    '–ª': ['–ª', 'l', 'ji'],
    '–º': ['–º', 'm'],
    '–Ω': ['–Ω', 'h', 'n'],
    '–æ': ['–æ', 'o', '0'],
    '–ø': ['–ø', 'n', 'p'],
    '—Ä': ['—Ä', 'r', 'p'],
    '—Å': ['—Å', 'c', 's'],
    '—Ç': ['—Ç', 'm', 't'],
    '—É': ['—É', 'y', 'u'],
    '—Ñ': ['—Ñ', 'f'],
    '—Ö': ['—Ö', 'x', 'h', '}{'],
    '—Ü': ['—Ü', 'c', 'u,'],
    '—á': ['—á', 'ch'],
    '—à': ['—à', 'sh'],
    '—â': ['—â', 'sch'],
    '—å': ['—å', 'b'],
    '—ã': ['—ã', 'bi'],
    '—ä': ['—ä'],
    '—ç': ['—ç', 'e'],
    '—é': ['—é', 'io'],
    '—è': ['—è', 'ya']
}

#–ü–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞)
bad_words = ['–¥–µ–±–∏–ª–∫–∞', '—Å—É–∫–∞', '—Å—É—á–∫–∞', '–µ–±–∞–Ω–∞—à–∫–∞', '–±–ª—è—Ç—å', '—Ö—É–µ—Å–æ—Å–∫–∞', '—Ö—É–µ—Å–æ—Å', '—à–ª—é—Ö–∞', '–ø–∏–¥–∞—Ä–∞—Å–∫–∞',
             '–¥–æ–ª–±–∞–µ–±–∫–∞', '–≤ –∞–¥—É', '–ø–∏–¥–∞—Ä–∞—Å', '–ø–∏–¥–æ—Ä–∞—Å–∫–∞', '–ø–∏–¥–æ—Ä–∞—Å',  '–¥–∞–ª–±–∞–µ–±–∫–∞', '–∫–æ–Ω—á–µ–Ω–Ω–∞—è', '–±–ª—è–¥–æ—Ç–∞', '–Ω–∞ —Ö—É–π', '–Ω–∞—Ö—É–π', '—Ö—É–π', '–ø–∏–∑–¥–∞',
             '–µ–±–∞—Ç—å', '–≤—ã–µ–±–∞—Ç—å', '–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞', '–¥–æ–ª–±–∏—Ç—å', '–∫–æ–Ω—á–∞—Ç—å', '–∫–æ–Ω—á–∏–ª', '—â–∞–≤–µ–ª—å', '–ø–µ—Ä—Å–∏–∫', '—Ä–∞–∫—É—à–∫–∞',
             '—Å–æ—Å–∏', '—Å–æ—Å–∞—Ç—å', '–≤—ã–µ–±–∞–ª', '–ø–æ–¥—Ä–æ—á–∏–ª', '–¥—Ä–æ—á–∏–ª', '—á–ª–µ–Ω', '—Å–æ—Å–∞–ª–∞', '—É–±–∏–ª', '–∑–∞–∫–æ–ø–∞–ª', '–≤—å–µ–±–∞–ª', '—Ä–∞–∑—ä–µ–±–∞–ª', '—Ä–∞–∑—ä–µ–±—É', '–∫–∞–±–∏–Ω–∞',
            '–æ—Ç', '@', '–ª–æ—Ö', '–ª–æ—Ö—É—à–∫–∞', '–±—É']


def create_normalizer():
    reverse_char_replace = {}

    for original_char, replacements in char_replace.items():
        for replacement in replacements:
            reverse_char_replace[replacement] = original_char

    def normalize_text(text: str) -> str:
        return ''.join(reverse_char_replace.get(char, char) for char in text.lower())

    return normalize_text


normalize_text = create_normalizer()


async def contain_bad_words(text: str, bad_words: set) -> bool:
    normalized_text = normalize_text(text)
    return any(word in normalized_text for word in bad_words)

#–°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    username = State()
    message = State()


@router_woman_day.callback_query(F.data == 'woman_day_menu')
async def callback_woman_day_menu(callback: CallbackQuery,state: FSMContext):
    value = await get_user_value_valentines(callback.from_user.id)
    getting_value = await get_user_value_valentines_from_top(callback.from_user.id)

    if value[0] == 0:
        await callback.message.edit_text(
            f'<b>üå∏ –î–µ–Ω—å –∂–µ–Ω—â–∏–Ω</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞!\n\n<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <u>–ù–∞—á–∞—Ç—å</u></b>\n\n‚óΩÔ∏è <b>–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {getting_value[0]} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π</b>\n\n‚ùï <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!</b>',
            reply_markup=woman_day_keyboard, parse_mode='HTML')
    else:
        await callback.message.edit_text(f'<b>üå∏ –î–µ–Ω—å –∂–µ–Ω—â–∏–Ω</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞!\n\n<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <u>–ù–∞—á–∞—Ç—å</u></b>\n\n‚óΩÔ∏è <b>–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {getting_value[0]} –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π</b>\n\n‚ùï <b>–í—ã –µ—â–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <u>{value[0]}</u> –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π!</b>', reply_markup=woman_day_keyboard, parse_mode='HTML')
    await state.clear()


@router_woman_day.callback_query(F.data == 'woman_day')
async def callback_woman_day(callback: CallbackQuery, state: FSMContext):
    value = await get_user_value_valentines(callback.from_user.id)

    if value[0] != 0:
        await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—é–∑–µ—Ä–Ω–µ–π–º), –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=woman_day_start)
        await state.set_state(Form.username)
    else:
        await callback.message.edit_text('‚ùå <b>–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!</b>', reply_markup=woman_day_start, parse_mode='HTML')


@router_woman_day.message(Form.username)
async def callback_username(message: Message, state: FSMContext):
    username = message.text.lstrip('@')

    users = await get_list_username(username)

    if username == message.from_user.username or username == 'unspecific_user':
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ!')
    else:
        if users:
            user = users[0]

            await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ @{user}, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º', reply_markup=woman_day_start)

            await state.update_data(username=user)
            await state.set_state(Form.message)
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –µ–≥–æ –Ω–µ –∑–∞–¥–∞–ª–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞!')


@router_woman_day.message(Form.message)
async def callback_message(message: Message, state: FSMContext):
    data = await state.get_data()

    username = data.get('username')
    await state.update_data(username=username, message=message.text)

    if not message.text:
        await message.answer('–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏!')
    else:
        if await contain_bad_words(text=message.text, bad_words=bad_words):
            await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç.')
        else:
            await message.answer(f'<b>üìù –í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ @{username} —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:</b>\n\n{message.text}\n\n<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>', reply_markup=are_u_sure, parse_mode='html')


@router_woman_day.callback_query(F.data == 'yes_valentine')
async def callback_yes_valentine(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    username = data.get('username')
    message = data.get('message')

    async with async_session() as session:
        for chat_id in await get_username_with_id(username=username):
            try:
                from run import bot
                await bot.send_message(chat_id, f'üéâ <b>–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!</b>\n\n{message}', reply_markup=report, parse_mode='html')
                await state.clear()

                await callback.message.edit_text('<b>‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>', reply_markup=woman_day_start, parse_mode='html')
                await logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id –∏ username: {callback.from_user.id} {callback.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: \n<{message}>,\n –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º: @{username}')

                stmt = (update(User).where(User.tg_id == chat_id).values(valentines_top = User.valentines_top + 1))
                await session.execute(stmt)

                stmt2 = (update(User).where(User.tg_id == callback.from_user.id, User.valentines_value > 0).values(valentines_value = User.valentines_value - 1))
                await session.execute(stmt2)

                await session.commit()
            except Exception:
                await message.edit_text('‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>', reply_markup=woman_day_start, parse_mode='html')


@router_woman_day.callback_query(F.data == 'reporting')
async def callback_reporting(callback: CallbackQuery):
    await callback.message.answer('‚õîÔ∏è <b>–ñ–∞–ª–æ–±–∞</b>\n\n–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–µ -> @wh47chu54y\n\n·Ö† ·Ö† ', reply_markup=notify, parse_mode='html')