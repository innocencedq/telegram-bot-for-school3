import asyncio
import datetime
import pytz
from aiogram import Router, F
from datetime import datetime
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, Command
from sqlalchemy import select, update
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.components.diary.parsing import refresh_token as rf
from app.supportfunctions.main_utils import get_week, get_fast_rasp
from app.components.routers.callbacks import week_callback
from app.components.notifyprocesses.notify import notify_update, special_notify
from app.database.requests import get_all_users, get_list_admin, get_image
from app.database.data import async_session, User, Images, Static
from app.components.keyboard import main_menu as keyboard_menu, ask_notify, ask_quick_menu
from app.components.keyboard import back_main_2 as back
from app.components.keyboard import for_vk_notify as kb_vk
from app.components.keyboard import notify as hide
from config import welcome_message

router = Router()

#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç + –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ö–ò–ê–°–£–û
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        refresh_token = args[1]

        result = await rf(message.from_user.id, refresh_token)
        if result == 'success': 
            await message.answer('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...')
            await asyncio.sleep(1)
        elif result == 'failed':
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ö–ò–ê–°–£–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ú–µ–Ω—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
            await asyncio.sleep(1)


    if message.from_user.id in await get_all_users():
        await menu(message, state)
    else:
        async with async_session() as session:
            if message.from_user.id not in await get_all_users():
                username = message.from_user.username if message.from_user.username else "unspecific_user"
                new_user = User(
                             tg_id=message.from_user.id,
                             username=username,
                             )

                session.add(new_user)
                await session.commit()
        await quick_settings_notify(message=message)


#–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
async def quick_settings_notify(message: Message):
    await message.answer('‚öôÔ∏è <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n\n–ù—É–∂–Ω—ã –ª–∏ –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –í–ö–æ–Ω—Ç–∞–∫—Ç–µ?\n\n<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>', parse_mode='HTML', reply_markup=ask_notify)

#–ö–æ–º–∞–Ω–¥–∞ /menu
@router.message(Command('menu'))
async def menu(message: Message, state: FSMContext):
    try:
        await message.delete()
        await state.clear()
        f = await get_image(week_name='main_menu')
        await message.answer_photo(photo=f, caption=f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> üëã\n{welcome_message}\n\n–î–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏? ->\n/menu", reply_markup=await keyboard_menu(message.from_user.id), parse_mode='html')
    except Exception as e:
        await message.answer('‚ùå')


#–ö–æ–º–∞–Ω–¥–∞ /whoami
@router.message(Command('whoami'))
async def givemefromdatabase(message: Message):
    await message.answer(f'–í–∞—à ID: <b>{message.from_user.id}</b>, –í–∞—à USERNAME: <b>@{message.from_user.username}</b>', parse_mode='html')


#–ö–æ–º–∞–Ω–¥–∞ /correctdatabase (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!)
@router.message(Command('correctdatabase'))
async def getfileid(message: Message):
    week_days = {1: 'monday', 2: 'tuesday', 3: 'thursday', 4: 'wednesday' , 5: 'friday', 6: 'calls'}
    async with async_session() as session:
        if message.from_user.id not in await get_list_admin():
            await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
        else:
            for keys, value in week_days.items():
                photo = FSInputFile(f'app/assets/raspisanie/{value}.jpg')
                sent_photo = await message.answer_photo(photo=photo)

                file_id = sent_photo.photo[-1].file_id

                existing_image = await session.execute(select(Images).where(Images.image_name == value))
                existing_image = existing_image.scalar_one_or_none()

                if existing_image:
                    stmt = update(Images).where(Images.image_name == value).values(image_id=file_id)
                    await session.execute(stmt)
                else:
                    new_image = Images(
                        image_id = file_id,
                        image_name = value
                    )
                    session.add(new_image)
                await session.commit()


#–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!!)
@router.message(Command('sendupdate'))
async def sendupdate(message: Message):
    if message.from_user.id not in await get_list_admin():
        await message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
    else:
        await notify_update()


#–ê–π–¥–∏ —Ñ–æ—Ç–æ
@router.message(Command('thisfileidphoto'))
async def thisfileidphoto(message: Message):
    try:
        await message.answer(f'file_id: {message.photo[-1].file_id}')
    except Exception as e:
        print(e)
        await message.answer('‚ùå')


#–ê–π–¥–∏ –≤–∏–¥–µ–æ
@router.message(Command('thisfileid'))
async def thisfileid(message: Message):
    try:
        await message.answer(f'file_id: {message.video.file_id}')
    except Exception:
        await message.answer('‚ùå')


#–ü–æ–ª—É—á–µ–Ω–∏—è chat_id
@router.message(Command('getmychatid'))
async def getmychatid(message: Message):
    await message.answer(f'{message.from_user.id}')


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def menu_text(message: Message, state: FSMContext):
    await menu(message=message, state=state)


@router.message(F.text == 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
async def week_quick_callback(message: Message):
    user_id = message.from_user.id
    new_username = message.from_user.username if message.from_user.username else 'unspecific_user'
    async with async_session() as session:
        last_username = await session.scalar(select(User.username).where(User.tg_id == user_id))
        
        if last_username != new_username:
            stmt = update(User).where(User.tg_id == user_id).values(username = new_username)
            stmt2 = update(Static).where(Static.id == 1).values(active_users = Static.active_users + 1)
            await session.execute(stmt)
            await session.execute(stmt2)
            await session.commit()
    try:
        week = await get_week()
        f, msg, markup = await get_fast_rasp(week)

        await message.answer_photo(photo=f, caption=f'{msg}', reply_markup=markup, parse_mode='html')
    except Exception:
        await message.answer('üòå <b>–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!</b> –ú–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –æ—Ç —à–∫–æ–ª—ã)', parse_mode='html')


#–ö–æ–º–∞–Ω–¥–∞ /ege
@router.message(Command('ege'))
async def schedule_ege(message: Message):
    await message.delete()
    text_schedule_ege = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠</b>\n" \
    f"<b>–û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥:</b>\n\n" \
    f"<b>23 –º–∞—è (–ø—Ç)</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ö–∏–º–∏—è\n" \
    f"<b>27 –º–∞—è (–≤—Ç)</b> ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π\n" \
    f"<b>30 –º–∞—è (–ø—Ç)</b> ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n" \
    f"<b>2 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, —Ñ–∏–∑–∏–∫–∞\n" \
    f"<b>5 –∏—é–Ω—è (—á—Ç)</b> ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å)\n" \
    f"<b>10 –∏—é–Ω—è (–≤—Ç)</b> ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (—É—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n" \
    f"<b>11 –∏—é–Ω—è (—Å—Ä)</b> ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (—É—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n\n" \
    f"<i>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–Ω–∏:</i>\n\n" \
    f"<b>16 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, —Ñ–∏–∑–∏–∫–∞\n" \
    f"<b>17 –∏—é–Ω—è (–≤—Ç)</b> ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n" \
    f"<b>18 –∏—é–Ω—è (—Å—Ä)</b> ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π) (—É—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å), –∏—Å—Ç–æ—Ä–∏—è, —Ö–∏–º–∏—è\n" \
    f"<b>19 –∏—é–Ω—è (—á—Ç)</b> ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π) (–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å), –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n" \
    f"<b>20 –∏—é–Ω—è (–ø—Ç)</b> ‚Äî –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è, –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è\n" \
    f"<b>23 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"
    await message.answer(text=text_schedule_ege, parse_mode='HTML', reply_markup=hide)


#–ö–æ–º–∞–Ω–¥–∞ /oge
@router.message(Command('oge'))
async def schedule_oge(message: Message):
    await message.delete()
    text_schedule_oge = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠</b>\n" \
    f"<b>–û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥:</b>\n\n" \
    f"<b>21 –º–∞—è (—Å—Ä)</b> ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)\n" \
    f"<b>22 –º–∞—è (—á—Ç)</b> ‚Äî –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π)\n" \
    f"<b>26 –º–∞—è (–ø–Ω)</b> ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, —Ö–∏–º–∏—è\n" \
    f"<b>29 –º–∞—è (—á—Ç)</b> ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –∏—Å—Ç–æ—Ä–∏—è, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è\n" \
    f"<b>3 –∏—é–Ω—è (–≤—Ç)</b> ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n" \
    f"<b>6 –∏—é–Ω—è (–ø—Ç)</b> ‚Äî –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ\n" \
    f"<b>9 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n" \
    f"<b>16 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî –±–∏–æ–ª–æ–≥–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —Ñ–∏–∑–∏–∫–∞\n\n" \
    f"<i>–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–Ω–∏</i>\n\n" \
    f"<b>26 –∏—é–Ω—è (—á—Ç)</b> ‚Äî —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n" \
    f"<b>27 –∏—é–Ω—è (–ø—Ç)</b> ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º (–∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏)\n" \
    f"<b>28 –∏—é–Ω—è (—Å–±)</b> ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º (–∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏)\n" \
    f"<b>30 –∏—é–Ω—è (–ø–Ω)</b> ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n" \
    f"<b>1 –∏—é–ª—è (–≤—Ç)</b> ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º\n" \
    f"<b>2 –∏—é–ª—è (—Å—Ä)</b> ‚Äî –ø–æ –≤—Å–µ–º —É—á–µ–±–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"
    await message.answer(text=text_schedule_oge, parse_mode='HTML', reply_markup=hide)


@router.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è!</b>\n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu', parse_mode='HTML')
